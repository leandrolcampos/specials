# ===----------------------------------------------------------------------=== #
# Copyright 2024 The Specials Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #

"""Defines common constants for elementary function implementations."""

from specials._internal.asserting import assert_float_dtype
from specials._internal.table import FloatTable


# ===----------------------- Exponential Functions ------------------------=== #
#
# References:
#
# Tang, P. T. P. (1989). Table-driven implementation of the exponential function
#   in IEEE floating-point arithmetic.
# ACM Transactions on Mathematical Software (TOMS), 15(2), 144-157.
# https://doi.org/10.1145/63522.214389


@always_inline
fn _get_exp_lead_table[dtype: DType]() -> FloatTable[32, dtype]:
    """Returns the table entries of `exp_lead` for single or double precision.
    """

    @parameter
    if dtype == DType.float32:
        return FloatTable[32, dtype].from_hexadecimal_values[
            0x3F80_0000,
            0x3F82_CD80,
            0x3F85_AAC0,
            0x3F88_9800,
            0x3F8B_95C0,
            0x3F8E_A400,
            0x3F91_C3C0,
            0x3F94_F4C0,
            0x3F98_37C0,
            0x3F9B_8D00,
            0x3F9E_F500,
            0x3FA2_7040,
            0x3FA5_FEC0,
            0x3FA9_A140,
            0x3FAD_5800,
            0x3FB1_23C0,
            0x3FB5_04C0,
            0x3FB8_FB80,
            0x3FBD_0880,
            0x3FC1_2C40,
            0x3FC5_6700,
            0x3FC9_B980,
            0x3FCE_2480,
            0x3FD2_A800,
            0x3FD7_44C0,
            0x3FDB_FB80,
            0x3FE0_CCC0,
            0x3FE5_B900,
            0x3FEA_C0C0,
            0x3FEF_E480,
            0x3FF5_2540,
            0x3FFA_8380,
        ]()
    else:  # dtype == DType.float64
        return FloatTable[32, dtype].from_hexadecimal_values[
            0x3FF00000_00000000,
            0x3FF059B0_D3158540,
            0x3FF0B558_6CF98900,
            0x3FF11301_D0125B40,
            0x3FF172B8_3C7D5140,
            0x3FF1D487_3168B980,
            0x3FF2387A_6E756200,
            0x3FF29E9D_F51FDEC0,
            0x3FF306FE_0A31B700,
            0x3FF371A7_373AA9C0,
            0x3FF3DEA6_4C123400,
            0x3FF44E08_60618900,
            0x3FF4BFDA_D5362A00,
            0x3FF5342B_569D4F80,
            0x3FF5AB07_DD485400,
            0x3FF6247E_B03A5580,
            0x3FF6A09E_667F3BC0,
            0x3FF71F75_E8EC5F40,
            0x3FF7A114_73EB0180,
            0x3FF82589_994CCE00,
            0x3FF8ACE5_422AA0C0,
            0x3FF93737_B0CDC5C0,
            0x3FF9C491_82A3F080,
            0x3FFA5503_B23E2540,
            0x3FFAE89F_995AD380,
            0x3FFB7F76_F2FB5E40,
            0x3FFC199B_DD855280,
            0x3FFCB720_DCEF9040,
            0x3FFD5818_DCFBA480,
            0x3FFDFC97_337B9B40,
            0x3FFEA4AF_A2A490C0,
            0x3FFF5076_5B6E4540,
        ]()


@always_inline
fn _get_exp_trail_table[dtype: DType]() -> FloatTable[32, dtype]:
    """Returns the table entries of `exp_trail` for single or double precision.
    """

    @parameter
    if dtype == DType.float32:
        return FloatTable[32, dtype].from_hexadecimal_values[
            0x0000_0000,
            0x3553_1585,
            0x34D9_F312,
            0x35E8_092E,
            0x3471_F546,
            0x36E6_2D17,
            0x361B_9D59,
            0x36BE_A3FC,
            0x36C1_4637,
            0x36E6_E755,
            0x36C9_8247,
            0x34C0_C312,
            0x3635_4D8B,
            0x3655_A754,
            0x36FB_A90B,
            0x36D6_074B,
            0x36CC_CFE7,
            0x36BD_1D8C,
            0x368E_7D60,
            0x35CC_A667,
            0x36A8_4554,
            0x36F6_19B9,
            0x35C1_51F8,
            0x366C_8F89,
            0x36F3_2B5A,
            0x36DE_5F6C,
            0x3677_6155,
            0x355C_EF90,
            0x355C_FBA5,
            0x36E6_6F73,
            0x36F4_5492,
            0x36CB_6DC9,
        ]()
    else:  # dtype == DType.float64
        return FloatTable[32, dtype].from_hexadecimal_values[
            0x00000000_00000000,
            0x3D0A1D73_E2A475B4,
            0x3CEEC531_7256E308,
            0x3CF0A4EB_BF1AED93,
            0x3D0D6E6F_BE462876,
            0x3D053C02_DC0144C8,
            0x3D0C3360_FD6D8E0B,
            0x3D009612_E8AFAD12,
            0x3CF52DE8_D5A46306,
            0x3CE54E28_AA05E8A9,
            0x3D011ADA_0911F09F,
            0x3D068189_B7A04EF8,
            0x3D038EA1_CBD7F621,
            0x3CBDF0A8_3C49D86A,
            0x3D04AC64_980A8C8F,
            0x3CD2C7C3_E81BF4B7,
            0x3CE92116_5F626CDD,
            0x3D09EE91_B8797785,
            0x3CDB5F54_408FDB37,
            0x3CF28ACF_88AFAB35,
            0x3CFB5BA7_C55A192D,
            0x3D027A28_0E1F92A0,
            0x3CF01C7C_46B071F3,
            0x3CFC8B42_4491CAF8,
            0x3D06AF43_9A68BB99,
            0x3CDBAA9E_C206AD4F,
            0x3CFC2220_CB12A092,
            0x3D048A81_E5E8F4A5,
            0x3CDC9768_16BAD9B8,
            0x3CFEB968_CAC39ED3,
            0x3CF9858F_73A18F5E,
            0x3C99D3E1_2DD8A18B,
        ]()


@register_passable("trivial")
struct ExpTable[dtype: DType]:
    """Table entries of `exp_lead` and `exp_trail` for single or double precision.
    """

    alias lead = _get_exp_lead_table[dtype]()
    alias trail = _get_exp_trail_table[dtype]()


# ===----------------------------------------------------------------------=== #
# Logarithm Functions
# ===----------------------------------------------------------------------=== #


@always_inline("nodebug")
fn _get_inv_fraction1[dtype: DType]() -> FloatTable[129, dtype]:
    """Returns the table entries of `inv_fraction1`."""
    assert_float_dtype["dtype", dtype]()

    @parameter
    if dtype == DType.float32:
        return FloatTable[129, dtype].from_hexadecimal_values[
            0x3F80_0000,
            0x3F7E_03F8,
            0x3F7C_0FC1,
            0x3F7A_232D,
            0x3F78_3E10,
            0x3F76_603E,
            0x3F74_898D,
            0x3F72_B9D6,
            0x3F70_F0F1,
            0x3F6F_2EB7,
            0x3F6D_7304,
            0x3F6B_BDB3,
            0x3F6A_0EA1,
            0x3F68_65AC,
            0x3F66_C2B4,
            0x3F65_2598,
            0x3F63_8E39,
            0x3F61_FC78,
            0x3F60_7038,
            0x3F5E_E95C,
            0x3F5D_67C9,
            0x3F5B_EB62,
            0x3F5A_740E,
            0x3F59_01B2,
            0x3F57_9436,
            0x3F56_2B81,
            0x3F54_C77B,
            0x3F53_680D,
            0x3F52_0D21,
            0x3F50_B6A0,
            0x3F4F_6475,
            0x3F4E_168A,
            0x3F4C_CCCD,
            0x3F4B_8728,
            0x3F4A_4588,
            0x3F49_07DA,
            0x3F47_CE0C,
            0x3F46_980C,
            0x3F45_65C8,
            0x3F44_3730,
            0x3F43_0C31,
            0x3F41_E4BC,
            0x3F40_C0C1,
            0x3F3F_A030,
            0x3F3E_82FA,
            0x3F3D_6910,
            0x3F3C_5264,
            0x3F3B_3EE7,
            0x3F3A_2E8C,
            0x3F39_2144,
            0x3F38_1703,
            0x3F37_0FBB,
            0x3F36_0B61,
            0x3F35_09E7,
            0x3F34_0B41,
            0x3F33_0F63,
            0x3F32_1643,
            0x3F31_1FD4,
            0x3F30_2C0B,
            0x3F2F_3ADE,
            0x3F2E_4C41,
            0x3F2D_602B,
            0x3F2C_7692,
            0x3F2B_8F6A,
            0x3F2A_AAAB,
            0x3F29_C84A,
            0x3F28_E83F,
            0x3F28_0A81,
            0x3F27_2F05,
            0x3F26_55C4,
            0x3F25_7EB5,
            0x3F24_A9CF,
            0x3F23_D70A,
            0x3F23_065E,
            0x3F22_37C3,
            0x3F21_6B31,
            0x3F20_A0A1,
            0x3F1F_D80A,
            0x3F1F_1166,
            0x3F1E_4CAD,
            0x3F1D_89D9,
            0x3F1C_C8E1,
            0x3F1C_09C1,
            0x3F1B_4C70,
            0x3F1A_90E8,
            0x3F19_D723,
            0x3F19_1F1A,
            0x3F18_68C8,
            0x3F17_B426,
            0x3F17_012E,
            0x3F16_4FDA,
            0x3F15_A025,
            0x3F14_F209,
            0x3F14_4581,
            0x3F13_9A86,
            0x3F12_F114,
            0x3F12_4925,
            0x3F11_A2B4,
            0x3F10_FDBC,
            0x3F10_5A38,
            0x3F0F_B824,
            0x3F0F_177A,
            0x3F0E_7835,
            0x3F0D_DA52,
            0x3F0D_3DCB,
            0x3F0C_A29C,
            0x3F0C_08C1,
            0x3F0B_7034,
            0x3F0A_D8F3,
            0x3F0A_42F8,
            0x3F09_AE41,
            0x3F09_1AC7,
            0x3F08_8889,
            0x3F07_F781,
            0x3F07_67AB,
            0x3F06_D905,
            0x3F06_4B8A,
            0x3F05_BF37,
            0x3F05_3408,
            0x3F04_A9FA,
            0x3F04_2108,
            0x3F03_9930,
            0x3F03_126F,
            0x3F02_8CC0,
            0x3F02_0821,
            0x3F01_848E,
            0x3F01_0204,
            0x3F00_8081,
            0x3F00_0000,
        ]()
    else:  # dtype == DType.float64
        return FloatTable[129, dtype].from_hexadecimal_values[
            0x3FF00000_00000000,
            0x3FEFC07F_01FC07F0,
            0x3FEF81F8_1F81F820,
            0x3FEF4465_9E4A4271,
            0x3FEF07C1_F07C1F08,
            0x3FEECC07_B301ECC0,
            0x3FEE9131_ABF0B767,
            0x3FEE573A_C901E574,
            0x3FEE1E1E_1E1E1E1E,
            0x3FEDE5D6_E3F8868A,
            0x3FEDAE60_76B981DB,
            0x3FED77B6_54B82C34,
            0x3FED41D4_1D41D41D,
            0x3FED0CB5_8F6EC074,
            0x3FECD856_89039B0B,
            0x3FECA4B3_055EE191,
            0x3FEC71C7_1C71C71C,
            0x3FEC3F8F_01C3F8F0,
            0x3FEC0E07_0381C0E0,
            0x3FEBDD2B_899406F7,
            0x3FEBACF9_14C1BAD0,
            0x3FEB7D6C_3DDA338B,
            0x3FEB4E81_B4E81B4F,
            0x3FEB2036_406C80D9,
            0x3FEAF286_BCA1AF28,
            0x3FEAC570_1AC5701B,
            0x3FEA98EF_606A63BE,
            0x3FEA6D01_A6D01A6D,
            0x3FEA41A4_1A41A41A,
            0x3FEA16D3_F97A4B02,
            0x3FE9EC8E_951033D9,
            0x3FE9C2D1_4EE4A102,
            0x3FE99999_9999999A,
            0x3FE970E4_F80CB872,
            0x3FE948B0_FCD6E9E0,
            0x3FE920FB_49D0E229,
            0x3FE8F9C1_8F9C18FA,
            0x3FE8D301_8D3018D3,
            0x3FE8ACB9_0F6BF3AA,
            0x3FE886E5_F0ABB04A,
            0x3FE86186_18618618,
            0x3FE83C97_7AB2BEDD,
            0x3FE81818_18181818,
            0x3FE7F405_FD017F40,
            0x3FE7D05F_417D05F4,
            0x3FE7AD22_08E0ECC3,
            0x3FE78A4C_8178A4C8,
            0x3FE767DC_E434A9B1,
            0x3FE745D1_745D1746,
            0x3FE72428_7F46DEBC,
            0x3FE702E0_5C0B8170,
            0x3FE6E1F7_6B4337C7,
            0x3FE6C16C_16C16C17,
            0x3FE6A13C_D1537290,
            0x3FE68168_16816817,
            0x3FE661EC_6A5122F9,
            0x3FE642C8_590B2164,
            0x3FE623FA_77016240,
            0x3FE60581_60581606,
            0x3FE5E75B_B8D015E7,
            0x3FE5C988_2B931057,
            0x3FE5AC05_6B015AC0,
            0x3FE58ED2_308158ED,
            0x3FE571ED_3C506B3A,
            0x3FE55555_55555555,
            0x3FE53909_48F40FEB,
            0x3FE51D07_EAE2F815,
            0x3FE50150_15015015,
            0x3FE4E5E0_A72F0539,
            0x3FE4CAB8_8725AF6E,
            0x3FE4AFD6_A052BF5B,
            0x3FE49539_E3B2D067,
            0x3FE47AE1_47AE147B,
            0x3FE460CB_C7F5CF9A,
            0x3FE446F8_6562D9FB,
            0x3FE42D66_25D51F87,
            0x3FE41414_14141414,
            0x3FE3FB01_3FB013FB,
            0x3FE3E22C_BCE4A902,
            0x3FE3C995_A47BABE7,
            0x3FE3B13B_13B13B14,
            0x3FE3991C_2C187F63,
            0x3FE38138_13813814,
            0x3FE3698D_F3DE0748,
            0x3FE3521C_FB2B78C1,
            0x3FE33AE4_5B57BCB2,
            0x3FE323E3_4A2B10BF,
            0x3FE30D19_0130D190,
            0x3FE2F684_BDA12F68,
            0x3FE2E025_C04B8097,
            0x3FE2C9FB_4D812CA0,
            0x3FE2B404_AD012B40,
            0x3FE29E41_29E4129E,
            0x3FE288B0_1288B013,
            0x3FE27350_B8812735,
            0x3FE25E22_708092F1,
            0x3FE24924_92492492,
            0x3FE23456_789ABCDF,
            0x3FE21FB7_8121FB78,
            0x3FE20B47_0C67C0D9,
            0x3FE1F704_7DC11F70,
            0x3FE1E2EF_3B3FB874,
            0x3FE1CF06_ADA2811D,
            0x3FE1BB4A_4046ED29,
            0x3FE1A7B9_611A7B96,
            0x3FE19453_808CA29C,
            0x3FE18118_11811812,
            0x3FE16E06_89427379,
            0x3FE15B1E_5F75270D,
            0x3FE1485F_0E0ACD3B,
            0x3FE135C8_1135C811,
            0x3FE12358_E75D3033,
            0x3FE11111_11111111,
            0x3FE0FEF0_10FEF011,
            0x3FE0ECF5_6BE69C90,
            0x3FE0DB20_A88F4696,
            0x3FE0C971_4FBCDA3B,
            0x3FE0B7E6_EC259DC8,
            0x3FE0A681_0A6810A7,
            0x3FE0953F_39010954,
            0x3FE08421_08421084,
            0x3FE07326_0A47F7C6,
            0x3FE0624D_D2F1A9FC,
            0x3FE05197_F7D73404,
            0x3FE04104_10410410,
            0x3FE03091_B51F5E1A,
            0x3FE02040_81020408,
            0x3FE01010_10101010,
            0x3FE00000_00000000,
        ]()


@always_inline("nodebug")
fn _get_log_fraction1_lead[dtype: DType]() -> FloatTable[129, dtype]:
    """Returns the table entries of `log_fraction1_lead`."""
    assert_float_dtype["dtype", dtype]()

    @parameter
    if dtype == DType.float32:
        return FloatTable[129, dtype].from_hexadecimal_values[
            0x0000_0000,
            0x3BFF_0000,
            0x3C7E_0000,
            0x3CBD_C000,
            0x3CFC_0000,
            0x3D1C_F000,
            0x3D3B_A000,
            0x3D5A_1000,
            0x3D78_5000,
            0x3D8B_2800,
            0x3D9A_0800,
            0x3DA8_D800,
            0x3DB7_8000,
            0x3DC6_1800,
            0x3DD4_9000,
            0x3DE2_F000,
            0x3DF1_3800,
            0x3DFF_6000,
            0x3E06_B800,
            0x3E0D_B800,
            0x3E14_A800,
            0x3E1B_8C00,
            0x3E22_6800,
            0x3E29_3400,
            0x3E2F_F800,
            0x3E36_B000,
            0x3E3D_5C00,
            0x3E43_FC00,
            0x3E4A_9000,
            0x3E51_1C00,
            0x3E57_9C00,
            0x3E5E_1400,
            0x3E64_7C00,
            0x3E6A_E000,
            0x3E71_3800,
            0x3E77_8400,
            0x3E7D_C800,
            0x3E82_0000,
            0x3E85_1800,
            0x3E88_2C00,
            0x3E8B_3A00,
            0x3E8E_4400,
            0x3E91_4A00,
            0x3E94_4A00,
            0x3E97_4600,
            0x3E9A_3E00,
            0x3E9D_3200,
            0x3EA0_2000,
            0x3EA3_0C00,
            0x3EA5_F200,
            0x3EA8_D400,
            0x3EAB_B200,
            0x3EAE_8C00,
            0x3EB1_6400,
            0x3EB4_3600,
            0x3EB7_0400,
            0x3EB9_CE00,
            0x3EBC_9400,
            0x3EBF_5600,
            0x3EC2_1600,
            0x3EC4_D000,
            0x3EC7_8800,
            0x3ECA_3C00,
            0x3ECC_EC00,
            0x3ECF_9800,
            0x3ED2_4200,
            0x3ED4_E600,
            0x3ED7_8800,
            0x3EDA_2600,
            0x3EDC_C200,
            0x3EDF_5A00,
            0x3EE1_EE00,
            0x3EE4_7E00,
            0x3EE7_0C00,
            0x3EE9_9600,
            0x3EEC_1E00,
            0x3EEE_A200,
            0x3EF1_2400,
            0x3EF3_A200,
            0x3EF6_1C00,
            0x3EF8_9400,
            0x3EFB_0800,
            0x3EFD_7A00,
            0x3EFF_E800,
            0x3F01_2A00,
            0x3F02_5E00,
            0x3F03_9100,
            0x3F04_C300,
            0x3F05_F300,
            0x3F07_2200,
            0x3F08_4F00,
            0x3F09_7B00,
            0x3F0A_A600,
            0x3F0B_CF00,
            0x3F0C_F700,
            0x3F0E_1D00,
            0x3F0F_4200,
            0x3F10_6600,
            0x3F11_8900,
            0x3F12_AA00,
            0x3F13_CA00,
            0x3F14_E900,
            0x3F16_0700,
            0x3F17_2300,
            0x3F18_3E00,
            0x3F19_5800,
            0x3F1A_7100,
            0x3F1B_8800,
            0x3F1C_9F00,
            0x3F1D_B400,
            0x3F1E_C800,
            0x3F1F_DA00,
            0x3F20_EC00,
            0x3F21_FC00,
            0x3F23_0C00,
            0x3F24_1A00,
            0x3F25_2700,
            0x3F26_3300,
            0x3F27_3E00,
            0x3F28_4800,
            0x3F29_5100,
            0x3F2A_5900,
            0x3F2B_5F00,
            0x3F2C_6500,
            0x3F2D_6A00,
            0x3F2E_6D00,
            0x3F2F_7000,
            0x3F30_7100,
            0x3F31_7200,
        ]()
    else:  # dtype == DType.float64
        return FloatTable[129, dtype].from_hexadecimal_values[
            0x00000000_00000000,
            0x3F7FE02A_6B000000,
            0x3F8FC0A8_B0F00000,
            0x3F97B91B_07D00000,
            0x3F9F829B_0E780000,
            0x3FA39E87_B9FC0000,
            0x3FA77458_F6300000,
            0x3FAB42DD_71180000,
            0x3FAF0A30_C0100000,
            0x3FB16536_EEA20000,
            0x3FB341D7_961A0000,
            0x3FB51B07_3F060000,
            0x3FB6F0D2_8AE40000,
            0x3FB8C345_D6300000,
            0x3FBA926D_3A4A0000,
            0x3FBC5E54_8F5A0000,
            0x3FBE2707_6E2A0000,
            0x3FBFEC91_31DA0000,
            0x3FC0D77E_7CD00000,
            0x3FC1B72A_D52F0000,
            0x3FC29552_F81F0000,
            0x3FC371FC_201E0000,
            0x3FC44D2B_6CCB0000,
            0x3FC526E5_E3A10000,
            0x3FC5FF30_70A70000,
            0x3FC6D60F_E7190000,
            0x3FC7AB89_02100000,
            0x3FC87FA0_65200000,
            0x3FC9525A_9CF40000,
            0x3FCA23BC_1FE20000,
            0x3FCAF3C9_4E800000,
            0x3FCBC286_742D0000,
            0x3FCC8FF7_C79A0000,
            0x3FCD5C21_6B4F0000,
            0x3FCE2707_6E2A0000,
            0x3FCEF0AD_CBDC0000,
            0x3FCFB918_6D5E0000,
            0x3FD04025_94B48000,
            0x3FD0A324_E2738000,
            0x3FD1058B_F9AE0000,
            0x3FD1675C_ABAB8000,
            0x3FD1C898_C1698000,
            0x3FD22941_FBCF0000,
            0x3FD2895A_13DE8000,
            0x3FD2E8E2_BAE10000,
            0x3FD347DD_9A980000,
            0x3FD3A64C_55690000,
            0x3FD40430_86868000,
            0x3FD4618B_C21C0000,
            0x3FD4BE5F_95770000,
            0x3FD51AAD_872D8000,
            0x3FD57677_17450000,
            0x3FD5D1BD_BF580000,
            0x3FD62C82_F2B98000,
            0x3FD686C8_1E9B0000,
            0x3FD6E08E_AA2B8000,
            0x3FD739D7_F6BB8000,
            0x3FD792A5_5FDD0000,
            0x3FD7EAF8_3B828000,
            0x3FD842D1_DA1E8000,
            0x3FD89A33_86C10000,
            0x3FD8F11E_87360000,
            0x3FD94794_1C210000,
            0x3FD99D95_81178000,
            0x3FD9F323_ECBF8000,
            0x3FDA4840_90E58000,
            0x3FDA9CEC_9A9A0000,
            0x3FDAF129_32470000,
            0x3FDB44F7_7BCC8000,
            0x3FDB9858_96930000,
            0x3FDBEB4D_9DA70000,
            0x3FDC3DD7_A7CD8000,
            0x3FDC8FF7_C79A8000,
            0x3FDCE1AF_0B858000,
            0x3FDD32FE_7E008000,
            0x3FDD83E7_258A0000,
            0x3FDDD46A_04C18000,
            0x3FDE2488_1A7C0000,
            0x3FDE7442_61D68000,
            0x3FDEC399_D2468000,
            0x3FDF128F_5FAF0000,
            0x3FDF6123_FA700000,
            0x3FDFAF58_8F788000,
            0x3FDFFD2E_08578000,
            0x3FE02552_A5A5C000,
            0x3FE04BDF_9DA90000,
            0x3FE0723E_5C1CC000,
            0x3FE0986F_4F570000,
            0x3FE0BE72_E4250000,
            0x3FE0E449_85D1C000,
            0x3FE109F3_9E2D4000,
            0x3FE12F71_9593C000,
            0x3FE154C3_D2F4C000,
            0x3FE179EA_BBD88000,
            0x3FE19EE6_B467C000,
            0x3FE1C3B8_1F710000,
            0x3FE1E85F_5E704000,
            0x3FE20CDC_D1928000,
            0x3FE23130_D7BE8000,
            0x3FE2555B_CE98C000,
            0x3FE2795E_12898000,
            0x3FE29D37_FEC28000,
            0x3FE2C0E9_ED448000,
            0x3FE2E474_36E40000,
            0x3FE307D7_334F0000,
            0x3FE32B13_39120000,
            0x3FE34E28_9D9CC000,
            0x3FE37117_B5474000,
            0x3FE393E0_D3560000,
            0x3FE3B684_49FFC000,
            0x3FE3D902_6A714000,
            0x3FE3FB5B_84D14000,
            0x3FE41D8F_E8464000,
            0x3FE43F9F_E2F9C000,
            0x3FE4618B_C21C4000,
            0x3FE48353_D1EA8000,
            0x3FE4A4F8_5DB00000,
            0x3FE4C679_AFCCC000,
            0x3FE4E7D8_11B74000,
            0x3FE50913_CC014000,
            0x3FE52A2D_265BC000,
            0x3FE54B24_67998000,
            0x3FE56BF9_D5B3C000,
            0x3FE58CAD_B5CD4000,
            0x3FE5AD40_4C358000,
            0x3FE5CDB1_DC6C0000,
            0x3FE5EE02_A9240000,
            0x3FE60E32_F4478000,
            0x3FE62E42_FEFA0000,
        ]()


@always_inline("nodebug")
fn _get_log_fraction1_trail[dtype: DType]() -> FloatTable[129, dtype]:
    """Returns the table entries of `log_fraction1_trail`."""
    assert_float_dtype["dtype", dtype]()

    @parameter
    if dtype == DType.float32:
        return FloatTable[129, dtype].from_hexadecimal_values[
            0x0000_0000,
            0x3429_AC42,
            0x35A8_B0FC,
            0x368D_83EB,
            0x3726_C39E,
            0x3687_B9FF,
            0x3631_EC66,
            0x36DD_7119,
            0x35C3_0046,
            0x365B_BA8E,
            0x3757_961C,
            0x34E7_E0C3,
            0x3752_8AE5,
            0x368B_AC63,
            0x36DA_7496,
            0x36A9_1EB8,
            0x34ED_C55E,
            0x3711_31DC,
            0x377C_F9A1,
            0x36AB_54BE,
            0x3725_F040,
            0x3778_403D,
            0x36AD_B32E,
            0x374B_C743,
            0x36C1_C29E,
            0x35FE_719D,
            0x3590_210E,
            0x3681_9483,
            0x3735_39E9,
            0x36F0_7F8B,
            0x3712_9D01,
            0x354E_85B2,
            0x376F_8F35,
            0x3685_AD3F,
            0x356D_C55E,
            0x36B7_2F71,
            0x3643_6AF2,
            0x3716_52D3,
            0x3713_89CE,
            0x363F_9AE5,
            0x36E5_5D5D,
            0x36C6_0B4D,
            0x34FD_E7BD,
            0x36D0_9EF4,
            0x370A_EB84,
            0x36EC_D4C4,
            0x3645_5694,
            0x3742_1A1B,
            0x363C_21C6,
            0x36FC_ABBC,
            0x3736_1CB8,
            0x375C_5D15,
            0x3776_FD60,
            0x353C_AE72,
            0x3601_E9B1,
            0x366A_A2BA,
            0x36BF_B5DF,
            0x3715_7F75,
            0x3760_EE0B,
            0x368E_D0F4,
            0x374E_1B05,
            0x36F4_39B3,
            0x36A0_E109,
            0x36AC_08BF,
            0x370F_B2FE,
            0x3410_E5BB,
            0x3732_6A68,
            0x3724_C91E,
            0x375D_EF32,
            0x36C4_B499,
            0x3659_DA72,
            0x36BD_3E6D,
            0x375F_1E6A,
            0x373C_2E18,
            0x3779_F804,
            0x371C_9629,
            0x3728_1307,
            0x3601_A7C7,
            0x3518_75A2,
            0x36CE_9234,
            0x3675_FAF0,
            0x370F_E9C1,
            0x36C4_7BC8,
            0x3738_2160,
            0x3715_2D2F,
            0x377C_ED49,
            0x3772_E0E7,
            0x36F4_F573,
            0x3717_2129,
            0x3698_5D1D,
            0x371C_F16A,
            0x370C_AC9F,
            0x35F4_BD35,
            0x36AB_BD8A,
            0x3656_8CF9,
            0x3740_FB8A,
            0x377A_F382,
            0x3766_8C95,
            0x3706_BDF6,
            0x375E_74C8,
            0x3770_944E,
            0x373F_F616,
            0x369E_D449,
            0x3721_B720,
            0x3739_9A79,
            0x3719_C891,
            0x3689_D9CE,
            0x373D_AA3A,
            0x34D3_562A,
            0x3609_4000,
            0x359A_9C56,
            0x375C_268B,
            0x36FE_8467,
            0x377F_17CE,
            0x36BC_21C6,
            0x371E_8F54,
            0x3742_ED82,
            0x374D_7E67,
            0x3740_8DBB,
            0x371E_600B,
            0x36D2_65BC,
            0x360C_F333,
            0x374E_ADA0,
            0x36DB_5CD8,
            0x3418_6B3E,
            0x370E_E361,
            0x35AA_4906,
            0x3717_A23C,
            0x35BF_BE8E,
        ]()
    else:  # dtype == DType.float64
        return FloatTable[129, dtype].from_hexadecimal_values[
            0x00000000_00000000,
            0x3D706788_FC376904,
            0x3D7807C7_9F3DB4EA,
            0x3D76C46A_A49FD532,
            0x3D298026_7C7E09E4,
            0x3D75EAFD_480AD901,
            0x3D76E7E2_31A7950F,
            0x3D671BEC_28D14C7E,
            0x3D662A66_17CC9717,
            0x3D77AE0E_8625C174,
            0x3D7D1D09_29983761,
            0x3D383F69_278E686A,
            0x3D76B4B9_BE499B9F,
            0x3D79B20F_5ACB42A6,
            0x3D6AAC6C_A17A4554,
            0x3D7C7431_5D617EF8,
            0x3D6E5CBD_3D50FFFC,
            0x3D7EABAA_A2E519A0,
            0x3D71CB2C_D2EE2F48,
            0x3D69E80A_41811A39,
            0x3D7EA469_80BB8E20,
            0x3D71EE87_79B2D8AC,
            0x3D6F4799_F4F6543E,
            0x3D7686F4_5C803ADC,
            0x3D727A79_0E7C4141,
            0x3D7A4391_AA8ECB8A,
            0x3D7B2123_7C6D65AD,
            0x3D792212_04012030,
            0x3D65AD1D_904C1D4E,
            0x3D76AC63_26E2360F,
            0x3D77FE5B_19CC0327,
            0x3D719AC5_3F39D122,
            0x3D734435_84BB03DE,
            0x3D77722B_7221ACBF,
            0x3D7E5CBD_3D50FFFC,
            0x3D664D94_8637950E,
            0x3D5F1546_AAA3361C,
            0x3D741036_B89EF42D,
            0x3D50E35F_73F7A018,
            0x3D72B546_27E82AD3,
            0x3D630701_CE63EAB9,
            0x3D59FAFB_C68E7540,
            0x3D7E5968_90A14F6A,
            0x3D3A8D7A_D24C13F0,
            0x3D5D309C_2CC91A85,
            0x3D7F5535_9159D3FB,
            0x3D717A71_CBCD735D,
            0x3D63F1DE_86093EFA,
            0x3D77B09F_42DECDED,
            0x3D7E2836_D326527E,
            0x3D7E0B42_724F5834,
            0x3D769B15_26ADB283,
            0x3D4394A1_1B1C1EE4,
            0x3D71E54B_DBD7C8AA,
            0x3D54AEC4_42BE1015,
            0x3D60F1C6_09C98C6C,
            0x3D7401A7_389314FF,
            0x3D71E89F_057691FF,
            0x3D67E1B2_59D2F3DA,
            0x3D462E92_7628CBC2,
            0x3D7096AD_69C62044,
            0x3D78B1DF_85DA755A,
            0x3D56FABA_4CDD147D,
            0x3D7822B2_EA4BBB12,
            0x3D584BF2_B68D766F,
            0x3D6D8515_FE535B87,
            0x3D40931A_909FEA5E,
            0x3D7E1AC4_4CE11285,
            0x3D4EC519_7DDB55D3,
            0x3D50FB59_8FB14F89,
            0x3D5B7BF7_861D37AC,
            0x3D66A6B9_D9E0A5BD,
            0x3D5A21AC_25D81EF3,
            0x3D7CFADE_DF4AF2AB,
            0x3D7AF558_77B232FB,
            0x3D679F28_28ADD176,
            0x3D71282F_B989A927,
            0x3D7B0987_2F63D165,
            0x3D3E1F8D_F68DBCF3,
            0x3D49802E_B9DCA7E7,
            0x3D3BB2CD_720EC44C,
            0x3D645630_A2B61E5B,
            0x3D7CC7B6_6BECF93B,
            0x3D7D2615_65F40D93,
            0x3D60FEC6_9C695D7F,
            0x3D736932_FE608046,
            0x3D6F404E_57963891,
            0x3D7A905C_8FED4A80,
            0x3D75415B_4C4BDD9A,
            0x3D5917ED_D5CBBD2D,
            0x3D592DFB_C7D93617,
            0x3D77DE29_80918CE4,
            0x3D65E9A9_8F33A396,
            0x3D69A0BF_C60E6FA0,
            0x3D52DD98_B97BAEF0,
            0x3D7E125E_4A7C7670,
            0x3D1A07BD_8B34BE7C,
            0x3D75B6C9_A81E87BB,
            0x3D7FA141_6F1B4391,
            0x3D7BE59E_021D6D69,
            0x3D788D75_BC1F9EDD,
            0x3D784564_2E6B65D3,
            0x3D5D1772_F5386374,
            0x3D334202_A10C3491,
            0x3D60BE1F_B590A1F5,
            0x3D6D7132_0556B67B,
            0x3D70E98B_75C96C43,
            0x3D4ED717_74092113,
            0x3D750CD4_E221301B,
            0x3D7E1157_C76F60C3,
            0x3D66FAA4_04263D0B,
            0x3D77A12D_A74EA82E,
            0x3D795732_325E617A,
            0x3D5CCEF4_E4F736C2,
            0x3D6EC27D_0B7B37B3,
            0x3D51BEE7_ABD17660,
            0x3D7F5D81_13DFA3D3,
            0x3D771CD8_B4766E99,
            0x3D6BB09C_B0985646,
            0x3D7435A5_E59D2D86,
            0x3D46ABB9_DF22BC57,
            0x3D6497A9_15428B44,
            0x3D79CCA0_8E310B9B,
            0x3D7CC498_49792ECA,
            0x3D6F2CFB_29AAA5F0,
            0x3D67648C_F6E3C5D7,
            0x3D667570_D6095FD2,
            0x3D51B194_F912B417,
            0x3D7CF79A_BC9E3B3A,
        ]()


@register_passable("trivial")
struct LogConstants[dtype: DType]:
    """Provides constants for the implementation of logarithm functions.

    Set `fraction1[j] = 1 + j / 128` for `j = 0, 1, ..., 128`. We computed the
    tables `inv_fraction1`, `log_fraction1_lead`, and `log_fraction1_trail` as
    follows:

    1. Set `N = 16` for single precision, and set `N = 39` for double precision;
    2. `inv_fraction1[j] = 1 / fraction1[j]`;
    3. `log_fraction1_lead[j] = 2**(-N) * trunc(2**N * log(fraction1[j]))`; and
    4. `log_fraction1_trail[j] = log(fraction1[j]) - log_fraction1_lead[j]`.

    Parameters:
        dtype: The data type of the constants.

    Constraints:
        The parameter `dtype` must be `float32` or `float64`.
    """

    alias inv_fraction1 = _get_inv_fraction1[dtype]()
    """The reciprocal of `fraction1[j]` for `j = 0, 1, ..., 128`."""

    alias log_fraction1_lead = _get_log_fraction1_lead[dtype]()
    """The leading bits of `log(fraction1[j])` for `j = 0, 1, ..., 128`."""

    alias log_fraction1_trail = _get_log_fraction1_trail[dtype]()
    """The trailing bits of `log(fraction1[j])` for `j = 0, 1, ..., 128`."""
